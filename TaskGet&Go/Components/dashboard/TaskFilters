import React, { useState } from "react";
import { Input } from "@/components/ui/input";
import { 
    Select, 
    SelectContent, 
    SelectItem, 
    SelectTrigger, 
    SelectValue 
} from "@/components/ui/select";
import { Search, Filter, SlidersHorizontal, MapPin } from "lucide-react";
import { motion, AnimatePresence } from "framer-motion";

const categories = [
    { value: "all", label: "All Categories" },
    { value: "General", label: "General" },
    { value: "Home", label: "Home" },
    { value: "Office", label: "Office" },
    { value: "Bazar", label: "Bazar" },
    { value: "Delivery", label: "Delivery" },
    { value: "Cleaning", label: "Cleaning" },
    { value: "PickUp", label: "PickUp" }
];

const priceRanges = [
    { value: "all", label: "All Prices" },
    { value: "under_500", label: "Under ₹500" },
    { value: "500_1500", label: "₹500 - ₹1,500" },
    { value: "1500_5000", label: "₹1,500 - ₹5,000" },
    { value: "above_5000", label: "Above ₹5,000" }
];

const dateRanges = [
    { value: "all", label: "All Dates" },
    { value: "today", label: "Today" },
    { value: "tomorrow", label: "Tomorrow" },
    { value: "this_week", label: "This Week" },
    { value: "no_deadline", label: "No Deadline" }
];

const durations = [
    { value: "all", label: "All Durations" },
    { value: "under_1h", label: "Under 1 hour" },
    { value: "1_3h", label: "1-3 hours" },
    { value: "3_6h", label: "3-6 hours" },
    { value: "over_6h", label: "Over 6 hours" }
];

const distanceOptions = [
    { value: "all", label: "All Distances" },
    { value: "100m", label: "Within 100m" },
    { value: "500m", label: "Within 500m" },
    { value: "1km", label: "Within 1km" },
    { value: "5km", label: "Within 5km" },
    { value: "10km", label: "Within 10km" },
    { value: "50km", label: "Within 50km" }
];

const priorities = [
    { value: "all", label: "All Priorities" },
    { value: "high", label: "High Priority" },
    { value: "medium", label: "Medium Priority" },
    { value: "low", label: "Low Priority" }
];

export default function TaskFilters({ filters, onFilterChange, userLocation }) {
    const [showAdvanced, setShowAdvanced] = useState(false);

    const handleFilterChange = (key, value) => {
        onFilterChange(prev => ({
            ...prev,
            [key]: value
        }));
    };

    return (
        <div className="space-y-4">
            {/* Search */}
            <div className="relative">
                <Search className="absolute left-3 top-1/2 -translate-y-1/2 w-4 h-4 text-slate-400" />
                <Input
                    placeholder="Search tasks..."
                    value={filters.search}
                    onChange={(e) => handleFilterChange("search", e.target.value)}
                    className="pl-10 bg-white border-slate-200 rounded-xl"
                />
            </div>

            {/* Quick Filters */}
            <div className="flex gap-2">
                <div className="flex-1">
                    <Select
                        value={filters.category}
                        onValueChange={(value) => handleFilterChange("category", value)}
                    >
                        <SelectTrigger className="bg-white border-slate-200 rounded-xl">
                            <SelectValue />
                        </SelectTrigger>
                        <SelectContent>
                            {categories.map((option) => (
                                <SelectItem key={option.value} value={option.value}>
                                    {option.label}
                                </SelectItem>
                            ))}
                        </SelectContent>
                    </Select>
                </div>
                <button
                    onClick={() => setShowAdvanced(!showAdvanced)}
                    className={`flex items-center gap-2 px-4 py-2 rounded-xl border transition-colors ${
                        showAdvanced ? "bg-indigo-500 text-white border-indigo-500" : "bg-white border-slate-200 text-slate-600"
                    }`}
                >
                    <SlidersHorizontal className="w-4 h-4" />
                    <span className="text-sm font-medium">Filter</span>
                </button>
            </div>

            {/* Advanced Filters */}
            <AnimatePresence>
                {showAdvanced && (
                    <motion.div
                        initial={{ opacity: 0, height: 0 }}
                        animate={{ opacity: 1, height: "auto" }}
                        exit={{ opacity: 0, height: 0 }}
                        transition={{ duration: 0.2 }}
                        className="mobile-card p-4 space-y-4"
                    >
                        <div className="flex items-center gap-2 mb-4">
                            <Filter className="w-4 h-4 text-indigo-600" />
                            <h3 className="font-semibold text-slate-900">Advanced Filters</h3>
                        </div>

                        <div className="grid grid-cols-2 gap-4">
                            {/* Price Range */}
                            <div>
                                <label className="text-sm font-medium text-slate-700 mb-2 block">Price Range</label>
                                <Select
                                    value={filters.priceRange}
                                    onValueChange={(value) => handleFilterChange("priceRange", value)}
                                >
                                    <SelectTrigger className="border-slate-200">
                                        <SelectValue />
                                    </SelectTrigger>
                                    <SelectContent>
                                        {priceRanges.map((range) => (
                                            <SelectItem key={range.value} value={range.value}>
                                                {range.label}
                                            </SelectItem>
                                        ))}
                                    </SelectContent>
                                </Select>
                            </div>

                            {/* Date Range */}
                            <div>
                                <label className="text-sm font-medium text-slate-700 mb-2 block">Date Range</label>
                                <Select
                                    value={filters.dateRange}
                                    onValueChange={(value) => handleFilterChange("dateRange", value)}
                                >
                                    <SelectTrigger className="border-slate-200">
                                        <SelectValue />
                                    </SelectTrigger>
                                    <SelectContent>
                                        {dateRanges.map((range) => (
                                            <SelectItem key={range.value} value={range.value}>
                                                {range.label}
                                            </SelectItem>
                                        ))}
                                    </SelectContent>
                                </Select>
                            </div>

                            {/* Duration */}
                            <div>
                                <label className="text-sm font-medium text-slate-700 mb-2 block">Duration</label>
                                <Select
                                    value={filters.duration}
                                    onValueChange={(value) => handleFilterChange("duration", value)}
                                >
                                    <SelectTrigger className="border-slate-200">
                                        <SelectValue />
                                    </SelectTrigger>
                                    <SelectContent>
                                        {durations.map((duration) => (
                                            <SelectItem key={duration.value} value={duration.value}>
                                                {duration.label}
                                            </SelectItem>
                                        ))}
                                    </SelectContent>
                                </Select>
                            </div>

                            {/* Priority */}
                            <div>
                                <label className="text-sm font-medium text-slate-700 mb-2 block">Priority</label>
                                <Select
                                    value={filters.priority}
                                    onValueChange={(value) => handleFilterChange("priority", value)}
                                >
                                    <SelectTrigger className="border-slate-200">
                                        <SelectValue />
                                    </SelectTrigger>
                                    <SelectContent>
                                        {priorities.map((priority) => (
                                            <SelectItem key={priority.value} value={priority.value}>
                                                {priority.label}
                                            </SelectItem>
                                        ))}
                                    </SelectContent>
                                </Select>
                            </div>
                        </div>

                        {/* Distance Filter - only show if user location is available */}
                        {userLocation && (
                            <div>
                                <label className="text-sm font-medium text-slate-700 mb-2 block flex items-center gap-1">
                                    <MapPin className="w-3 h-3" />
                                    Distance from you
                                </label>
                                <Select
                                    value={filters.distance}
                                    onValueChange={(value) => handleFilterChange("distance", value)}
                                >
                                    <SelectTrigger className="border-slate-200">
                                        <SelectValue />
                                    </SelectTrigger>
                                    <SelectContent>
                                        {distanceOptions.map((option) => (
                                            <SelectItem key={option.value} value={option.value}>
                                                {option.label}
                                            </SelectItem>
                                        ))}
                                    </SelectContent>
                                </Select>
                            </div>
                        )}

                        {!userLocation && (
                            <div className="p-3 bg-amber-50 rounded-lg border border-amber-200">
                                <p className="text-sm text-amber-700 flex items-center gap-2">
                                    <MapPin className="w-4 h-4" />
                                    Enable location access to filter by distance
                                </p>
                            </div>
                        )}
                    </motion.div>
                )}
            </AnimatePresence>
        </div>
    );
}