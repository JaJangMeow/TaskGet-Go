import React, { useState } from "react";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { Textarea } from "@/components/ui/textarea";
import { Button } from "@/components/ui/button";
import { Switch } from "@/components/ui/switch";
import { Progress } from "@/components/ui/progress";
import { 
    ArrowLeft,
    ArrowRight,
    IndianRupee,
    Clock,
    Calendar,
    CheckCircle2,
    AlertTriangle
} from "lucide-react";
import CategorySelector from "./CategorySelector";
import LocationPicker from "./LocationPicker";
import MediaUpload from "./MediaUpload";
import { motion, AnimatePresence } from "framer-motion";

const STEPS = [
    { id: 1, title: "Basic Info", description: "Title & Description" },
    { id: 2, title: "Categories", description: "Select up to 2" },
    { id: 3, title: "Location", description: "Where is the task?" },
    { id: 4, title: "Timing", description: "Duration & Deadline" },
    { id: 5, title: "Budget", description: "Set your price" },
    { id: 6, title: "Media", description: "Photos & Video" },
    { id: 7, title: "Review", description: "Final check" }
];

export default function TaskForm({ onSubmit, isSubmitting }) {
    const [currentStep, setCurrentStep] = useState(1);
    const [formData, setFormData] = useState({
        title: "",
        description: "",
        categories: ["General"],
        location: "",
        latitude: null,
        longitude: null,
        timeline: "",
        estimated_duration: "",
        deadline: "",
        payment_amount: "",
        negotiable: false,
        images: [],
        video: null,
        contact_info: ""
    });

    const [errors, setErrors] = useState({});

    const validateStep = (step) => {
        const newErrors = {};

        switch (step) {
            case 1:
                if (!formData.title.trim()) newErrors.title = "Title is required";
                if (!formData.description.trim()) newErrors.description = "Description is required";
                break;
            case 2:
                if (formData.categories.length === 0) newErrors.categories = "Select at least one category";
                break;
            case 3:
                if (!formData.location.trim()) newErrors.location = "Location is required";
                break;
            case 5:
                if (!formData.payment_amount || parseFloat(formData.payment_amount) <= 0) {
                    newErrors.payment_amount = "Please enter a valid amount";
                }
                break;
            case 7:
                if (!formData.contact_info.trim()) newErrors.contact_info = "Contact information is required";
                break;
        }

        setErrors(newErrors);
        return Object.keys(newErrors).length === 0;
    };

    const nextStep = () => {
        if (validateStep(currentStep)) {
            setCurrentStep(prev => Math.min(prev + 1, STEPS.length));
        }
    };

    const prevStep = () => {
        setCurrentStep(prev => Math.max(prev - 1, 1));
    };

    const handleInputChange = (field, value) => {
        setFormData(prev => ({ ...prev, [field]: value }));
        if (errors[field]) {
            setErrors(prev => ({ ...prev, [field]: "" }));
        }
    };

    const handleSubmit = () => {
        if (validateStep(7)) {
            onSubmit({
                ...formData,
                payment_amount: parseFloat(formData.payment_amount)
            });
        }
    };

    const progress = (currentStep / STEPS.length) * 100;

    return (
        <div className="max-w-md mx-auto">
            {/* Progress Header */}
            <div className="mobile-card p-4 mb-4 sticky top-20 z-10">
                <div className="flex items-center justify-between mb-3">
                    <div>
                        <h3 className="font-bold text-slate-900 text-sm">
                            Step {currentStep} of {STEPS.length}
                        </h3>
                        <p className="text-xs text-slate-600">
                            {STEPS[currentStep - 1].title}
                        </p>
                    </div>
                    <div className="text-right">
                        <div className="text-xs font-medium text-slate-700">
                            {Math.round(progress)}%
                        </div>
                    </div>
                </div>
                <Progress value={progress} className="h-2" />
            </div>

            {/* Form Steps */}
            <div className="mobile-card p-6">
                <AnimatePresence mode="wait">
                    <motion.div
                        key={currentStep}
                        initial={{ opacity: 0, x: 20 }}
                        animate={{ opacity: 1, x: 0 }}
                        exit={{ opacity: 0, x: -20 }}
                        transition={{ duration: 0.3 }}
                        className="space-y-6"
                    >
                        {/* Step 1: Basic Info */}
                        {currentStep === 1 && (
                            <div className="space-y-5">
                                <div className="text-center mb-6">
                                    <h2 className="text-xl font-bold text-slate-900">
                                        What do you need help with?
                                    </h2>
                                    <p className="text-sm text-slate-600 mt-1">
                                        Give your task a clear title and description
                                    </p>
                                </div>

                                <div className="space-y-2">
                                    <Label htmlFor="title">Task Title *</Label>
                                    <Input
                                        id="title"
                                        placeholder="e.g., Need help cleaning my apartment"
                                        value={formData.title}
                                        onChange={(e) => handleInputChange("title", e.target.value)}
                                        className={errors.title ? "border-red-500" : ""}
                                    />
                                    {errors.title && (
                                        <p className="text-sm text-red-600">{errors.title}</p>
                                    )}
                                </div>

                                <div className="space-y-2">
                                    <Label htmlFor="description">Description *</Label>
                                    <Textarea
                                        id="description"
                                        placeholder="Describe what you need done, any specific requirements..."
                                        value={formData.description}
                                        onChange={(e) => handleInputChange("description", e.target.value)}
                                        rows={4}
                                        className={errors.description ? "border-red-500" : ""}
                                    />
                                    {errors.description && (
                                        <p className="text-sm text-red-600">{errors.description}</p>
                                    )}
                                </div>
                            </div>
                        )}

                        {/* Step 2: Categories */}
                        {currentStep === 2 && (
                            <div className="space-y-5">
                                <div className="text-center mb-6">
                                    <h2 className="text-xl font-bold text-slate-900">
                                        Choose Categories
                                    </h2>
                                    <p className="text-sm text-slate-600 mt-1">
                                        Select up to 2 categories that best describe your task
                                    </p>
                                </div>

                                <CategorySelector
                                    selectedCategories={formData.categories}
                                    onCategoriesChange={(categories) => handleInputChange("categories", categories)}
                                />
                                
                                {errors.categories && (
                                    <p className="text-sm text-red-600">{errors.categories}</p>
                                )}
                            </div>
                        )}

                        {/* Step 3: Location */}
                        {currentStep === 3 && (
                            <div className="space-y-5">
                                <div className="text-center mb-6">
                                    <h2 className="text-xl font-bold text-slate-900">
                                        Where is this task?
                                    </h2>
                                    <p className="text-sm text-slate-600 mt-1">
                                        Set your precise location
                                    </p>
                                </div>

                                <LocationPicker
                                    address={formData.location}
                                    onLocationChange={(data) => {
                                        handleInputChange("location", data.address);
                                        handleInputChange("latitude", data.lat);
                                        handleInputChange("longitude", data.lng);
                                    }}
                                />
                                
                                {errors.location && (
                                    <p className="text-sm text-red-600">{errors.location}</p>
                                )}
                            </div>
                        )}

                        {/* Step 4: Timing */}
                        {currentStep === 4 && (
                            <div className="space-y-5">
                                <div className="text-center mb-6">
                                    <h2 className="text-xl font-bold text-slate-900">
                                        When do you need this done?
                                    </h2>
                                    <p className="text-sm text-slate-600 mt-1">
                                        Set your timeline and deadline
                                    </p>
                                </div>

                                <div className="space-y-4">
                                    <div className="space-y-2">
                                        <Label htmlFor="timeline">Timeline (Optional)</Label>
                                        <Input
                                            id="timeline"
                                            placeholder="e.g., ASAP, This weekend, Flexible"
                                            value={formData.timeline}
                                            onChange={(e) => handleInputChange("timeline", e.target.value)}
                                        />
                                    </div>

                                    <div className="grid grid-cols-2 gap-4">
                                        <div className="space-y-2">
                                            <Label htmlFor="duration">
                                                <Clock className="w-4 h-4 inline mr-1" />
                                                Duration
                                            </Label>
                                            <Input
                                                id="duration"
                                                placeholder="2-3 hours"
                                                value={formData.estimated_duration}
                                                onChange={(e) => handleInputChange("estimated_duration", e.target.value)}
                                            />
                                        </div>

                                        <div className="space-y-2">
                                            <Label htmlFor="deadline">
                                                <Calendar className="w-4 h-4 inline mr-1" />
                                                Deadline
                                            </Label>
                                            <Input
                                                id="deadline"
                                                type="date"
                                                value={formData.deadline}
                                                onChange={(e) => handleInputChange("deadline", e.target.value)}
                                            />
                                        </div>
                                    </div>
                                </div>
                            </div>
                        )}

                        {/* Step 5: Budget */}
                        {currentStep === 5 && (
                            <div className="space-y-5">
                                <div className="text-center mb-6">
                                    <h2 className="text-xl font-bold text-slate-900">
                                        What's your budget?
                                    </h2>
                                    <p className="text-sm text-slate-600 mt-1">
                                        Set a fair price for your task
                                    </p>
                                </div>

                                <div className="space-y-4">
                                    <div className="space-y-2">
                                        <Label htmlFor="budget">Budget Amount (₹) *</Label>
                                        <div className="relative">
                                            <IndianRupee className="absolute left-3 top-1/2 -translate-y-1/2 w-4 h-4 text-slate-400" />
                                            <Input
                                                id="budget"
                                                type="number"
                                                placeholder="1000"
                                                value={formData.payment_amount}
                                                onChange={(e) => handleInputChange("payment_amount", e.target.value)}
                                                className={`pl-10 ${errors.payment_amount ? "border-red-500" : ""}`}
                                            />
                                        </div>
                                        {errors.payment_amount && (
                                            <p className="text-sm text-red-600">{errors.payment_amount}</p>
                                        )}
                                    </div>

                                    <div className="flex items-center justify-between p-4 bg-blue-50 rounded-lg border border-blue-200">
                                        <div>
                                            <p className="text-sm font-medium text-blue-900">Negotiable Price</p>
                                            <p className="text-xs text-blue-700">Allow taskers to propose different rates</p>
                                        </div>
                                        <Switch
                                            checked={formData.negotiable}
                                            onCheckedChange={(checked) => handleInputChange("negotiable", checked)}
                                        />
                                    </div>
                                </div>
                            </div>
                        )}

                        {/* Step 6: Media */}
                        {currentStep === 6 && (
                            <div className="space-y-5">
                                <div className="text-center mb-6">
                                    <h2 className="text-xl font-bold text-slate-900">
                                        Add Photos & Video
                                    </h2>
                                    <p className="text-sm text-slate-600 mt-1">
                                        Help taskers understand your needs better
                                    </p>
                                </div>

                                <MediaUpload
                                    images={formData.images}
                                    video={formData.video}
                                    onImagesChange={(images) => handleInputChange("images", images)}
                                    onVideoChange={(video) => handleInputChange("video", video)}
                                />
                            </div>
                        )}

                        {/* Step 7: Review */}
                        {currentStep === 7 && (
                            <div className="space-y-5">
                                <div className="text-center mb-6">
                                    <h2 className="text-xl font-bold text-slate-900">
                                        Review & Post
                                    </h2>
                                    <p className="text-sm text-slate-600 mt-1">
                                        Check everything looks good
                                    </p>
                                </div>

                                {/* Task Summary */}
                                <div className="space-y-4">
                                    <div className="bg-slate-50 p-4 rounded-lg">
                                        <h4 className="font-medium text-slate-900 mb-2">{formData.title}</h4>
                                        <p className="text-sm text-slate-700 mb-3">{formData.description}</p>
                                        
                                        <div className="grid grid-cols-2 gap-4 text-xs text-slate-600">
                                            <div>
                                                <span className="font-medium">Categories:</span>
                                                <br />
                                                {formData.categories.join(", ")}
                                            </div>
                                            <div>
                                                <span className="font-medium">Budget:</span>
                                                <br />
                                                ₹{formData.payment_amount} {formData.negotiable && "(Negotiable)"}
                                            </div>
                                        </div>
                                    </div>

                                    <div className="space-y-2">
                                        <Label htmlFor="contact">Contact Information *</Label>
                                        <Textarea
                                            id="contact"
                                            placeholder="Your phone number, email, or preferred contact method..."
                                            value={formData.contact_info}
                                            onChange={(e) => handleInputChange("contact_info", e.target.value)}
                                            rows={3}
                                            className={errors.contact_info ? "border-red-500" : ""}
                                        />
                                        {errors.contact_info && (
                                            <p className="text-sm text-red-600">{errors.contact_info}</p>
                                        )}
                                    </div>

                                    <div className="bg-amber-50 p-4 rounded-lg border border-amber-200">
                                        <div className="flex items-start gap-2">
                                            <AlertTriangle className="w-4 h-4 text-amber-600 mt-0.5 flex-shrink-0" />
                                            <div className="text-xs text-amber-700">
                                                <p className="font-medium mb-1">Before posting:</p>
                                                <ul className="space-y-1">
                                                    <li>• Make sure all details are accurate</li>
                                                    <li>• Your contact info will be shared with applicants</li>
                                                    <li>• You can manage applications after posting</li>
                                                </ul>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        )}
                    </motion.div>
                </AnimatePresence>

                {/* Navigation Buttons */}
                <div className="flex justify-between pt-6 mt-6 border-t border-slate-200">
                    <Button
                        type="button"
                        variant="outline"
                        onClick={prevStep}
                        disabled={currentStep === 1}
                        className="flex items-center gap-2"
                    >
                        <ArrowLeft className="w-4 h-4" />
                        Back
                    </Button>

                    {currentStep < STEPS.length ? (
                        <Button
                            type="button"
                            onClick={nextStep}
                            className="mobile-button flex items-center gap-2 text-white"
                        >
                            Next
                            <ArrowRight className="w-4 h-4" />
                        </Button>
                    ) : (
                        <Button
                            type="button"
                            onClick={handleSubmit}
                            disabled={isSubmitting}
                            className="mobile-button flex items-center gap-2 text-white"
                        >
                            {isSubmitting ? (
                                <>
                                    <div className="animate-spin rounded-full h-4 w-4 border-b-2 border-white"></div>
                                    Posting...
                                </>
                            ) : (
                                <>
                                    <CheckCircle2 className="w-4 h-4" />
                                    Post Task
                                </>
                            )}
                        </Button>
                    )}
                </div>
            </div>
        </div>
    );
}