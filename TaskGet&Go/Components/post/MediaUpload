
import React, { useState, useRef } from 'react';
import { Button } from '@/components/ui/button';
import { Upload, X, Image, Video, AlertCircle, Loader2 } from 'lucide-react';
import { UploadFile } from '@/integrations/Core';

export default function MediaUpload({ images = [], video = null, onImagesChange, onVideoChange }) {
    const [uploading, setUploading] = useState({ images: {}, video: false });
    const imageInputRef = useRef(null);
    const videoInputRef = useRef(null);

    const handleImageUpload = async (files) => {
        const fileArray = Array.from(files);
        const remainingSlots = 4 - images.length;
        if (fileArray.length > remainingSlots) {
            alert(`You can only upload ${remainingSlots} more image(s).`);
        }
        const filesToUpload = fileArray.slice(0, remainingSlots);

        for (const file of filesToUpload) {
            const tempId = `${file.name}-${Date.now()}`;
            // Check file size (10MB limit)
            if (file.size > 10 * 1024 * 1024) {
                alert(`Image ${file.name} is too large. Maximum size is 10MB.`);
                continue;
            }

            // Check file type
            if (!file.type.startsWith('image/')) {
                alert(`${file.name} is not a valid image file.`);
                continue;
            }

            setUploading(prev => ({
                ...prev,
                images: { ...prev.images, [tempId]: true }
            }));

            try {
                const result = await UploadFile({ file });
                onImagesChange([...images, result.file_url]);
            } catch (error) {
                console.error('Error uploading image:', error);
                alert(`Failed to upload ${file.name}. Please try again.`);
            } finally {
                setUploading(prev => {
                    const newImages = { ...prev.images };
                    delete newImages[tempId];
                    return { ...prev, images: newImages };
                });
            }
        }
    };

    const handleVideoUpload = async (file) => {
        // Check file size (30MB limit)
        if (file.size > 30 * 1024 * 1024) {
            alert('Video is too large. Maximum size is 30MB.');
            return;
        }

        // Check file type
        if (!file.type.startsWith('video/')) {
            alert('Please select a valid video file.');
            return;
        }

        setUploading(prev => ({ ...prev, video: true }));

        try {
            const result = await UploadFile({ file });
            onVideoChange(result.file_url);
        } catch (error) {
            console.error('Error uploading video:', error);
            alert('Failed to upload video. Please try again.');
        } finally {
            setUploading(prev => ({ ...prev, video: false }));
        }
    };

    const removeImage = (index) => {
        const newImages = images.filter((_, i) => i !== index);
        onImagesChange(newImages);
    };

    const removeVideo = () => {
        onVideoChange(null);
    };
    
    const isImageUploading = Object.values(uploading.images).some(Boolean);

    return (
        <div className="space-y-4">
            {/* Images Section */}
            <div className="space-y-3">
                <div className="flex items-center justify-between">
                    <h4 className="text-sm font-medium text-app-midnight">
                        Images ({images.length}/4)
                    </h4>
                    <span className="text-xs text-app-stone">Max 10MB each</span>
                </div>

                {/* Image Grid */}
                <div className="grid grid-cols-2 gap-3">
                    {images.map((imageUrl, index) => (
                        <div key={index} className="relative group">
                            <img
                                src={imageUrl}
                                alt={`Task image ${index + 1}`}
                                className="w-full h-24 object-cover rounded-lg border border-app-grey"
                            />
                            <button
                                onClick={() => removeImage(index)}
                                className="absolute -top-2 -right-2 w-5 h-5 bg-app-midnight text-white rounded-full flex items-center justify-center opacity-0 group-hover:opacity-100 transition-opacity"
                            >
                                <X className="w-3 h-3" />
                            </button>
                        </div>
                    ))}

                    {/* Upload New Image */}
                    {images.length < 4 && (
                        <label className="flex flex-col items-center justify-center h-24 border-2 border-dashed border-app-grey rounded-lg cursor-pointer hover:border-app-orange transition-colors">
                            <input
                                ref={imageInputRef}
                                type="file"
                                multiple
                                accept="image/*"
                                className="hidden"
                                onChange={(e) => handleImageUpload(e.target.files)}
                            />
                            <Image className="w-6 h-6 text-app-stone mb-1" />
                            <span className="text-xs text-app-stone">Add Image</span>
                        </label>
                    )}
                </div>

                {/* Upload Progress for Images */}
                {isImageUploading && (
                    <div className="flex items-center gap-2 text-sm text-app-stone">
                        <Loader2 className="w-4 h-4 animate-spin" />
                        <span>Uploading images...</span>
                    </div>
                )}
            </div>

            {/* Video Section */}
            <div className="space-y-3">
                <div className="flex items-center justify-between">
                    <h4 className="text-sm font-medium text-app-midnight">
                        Video (Optional)
                    </h4>
                    <span className="text-xs text-app-stone">Max 30MB</span>
                </div>

                {video ? (
                    <div className="relative group">
                        <video
                            src={video}
                            className="w-full h-32 object-cover rounded-lg border border-app-grey bg-app-midnight"
                            controls
                        />
                        <button
                            onClick={removeVideo}
                            className="absolute -top-2 -right-2 w-5 h-5 bg-app-midnight text-white rounded-full flex items-center justify-center opacity-0 group-hover:opacity-100 transition-opacity"
                        >
                            <X className="w-3 h-3" />
                        </button>
                    </div>
                ) : (
                    <label className="flex flex-col items-center justify-center h-32 border-2 border-dashed border-app-grey rounded-lg cursor-pointer hover:border-app-orange transition-colors">
                        <input
                            ref={videoInputRef}
                            type="file"
                            accept="video/*"
                            className="hidden"
                            onChange={(e) => e.target.files[0] && handleVideoUpload(e.target.files[0])}
                        />
                        <Video className="w-8 h-8 text-app-stone mb-2" />
                        <span className="text-sm text-app-stone">Add Video</span>
                    </label>
                )}

                {uploading.video && (
                    <div className="flex items-center gap-2 text-sm text-app-stone">
                        <Loader2 className="w-4 h-4 animate-spin" />
                        <span>Uploading video...</span>
                    </div>
                )}
            </div>
        </div>
    );
}
