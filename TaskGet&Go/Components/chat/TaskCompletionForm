import React, { useState, useRef } from 'react';
import { motion } from 'framer-motion';
import { Button } from '@/components/ui/button';
import { Textarea } from '@/components/ui/textarea';
import { X, Upload, Camera, Loader2 } from 'lucide-react';
import { UploadFile } from '@/integrations/Core';

export default function TaskCompletionForm({ task, onSubmit, onCancel }) {
    const [notes, setNotes] = useState('');
    const [images, setImages] = useState([]);
    const [uploading, setUploading] = useState(false);
    const [submitting, setSubmitting] = useState(false);
    const fileInputRef = useRef(null);

    const handleImageUpload = async (files) => {
        const fileArray = Array.from(files);
        const remainingSlots = 5 - images.length;
        
        if (fileArray.length > remainingSlots) {
            alert(`You can only upload ${remainingSlots} more image(s).`);
        }
        
        const filesToUpload = fileArray.slice(0, remainingSlots);
        setUploading(true);

        for (const file of filesToUpload) {
            if (file.size > 10 * 1024 * 1024) {
                alert(`Image ${file.name} is too large. Maximum size is 10MB.`);
                continue;
            }

            if (!file.type.startsWith('image/')) {
                alert(`${file.name} is not a valid image file.`);
                continue;
            }

            try {
                const result = await UploadFile({ file });
                setImages(prev => [...prev, result.file_url]);
            } catch (error) {
                console.error('Error uploading image:', error);
                alert(`Failed to upload ${file.name}. Please try again.`);
            }
        }
        
        setUploading(false);
    };

    const removeImage = (index) => {
        setImages(prev => prev.filter((_, i) => i !== index));
    };

    const handleSubmit = async (e) => {
        e.preventDefault();
        
        if (!notes.trim() && images.length === 0) {
            alert('Please provide completion notes or upload at least one image as proof.');
            return;
        }

        setSubmitting(true);
        await onSubmit({
            notes: notes.trim(),
            images: images
        });
        setSubmitting(false);
    };

    return (
        <motion.div
            initial={{ opacity: 0 }}
            animate={{ opacity: 1 }}
            exit={{ opacity: 0 }}
            className="fixed inset-0 bg-black/50 flex items-center justify-center p-4 z-50"
        >
            <motion.div
                initial={{ scale: 0.95, opacity: 0 }}
                animate={{ scale: 1, opacity: 1 }}
                exit={{ scale: 0.95, opacity: 0 }}
                className="bg-white rounded-xl p-6 w-full max-w-md max-h-[80vh] overflow-y-auto"
            >
                <div className="flex justify-between items-center mb-4">
                    <h2 className="text-xl font-bold text-app-midnight">Mark Task Complete</h2>
                    <Button variant="ghost" size="icon" onClick={onCancel}>
                        <X className="w-4 h-4" />
                    </Button>
                </div>

                <form onSubmit={handleSubmit} className="space-y-4">
                    {/* Task Details */}
                    <div className="bg-app-silver/30 p-3 rounded-lg">
                        <h3 className="font-medium text-app-midnight mb-1">{task.title}</h3>
                        <p className="text-sm text-app-stone">Payment: â‚¹{task.payment_amount}</p>
                    </div>

                    {/* Completion Notes */}
                    <div className="space-y-2">
                        <label className="text-sm font-medium text-app-midnight">
                            Completion Notes
                        </label>
                        <Textarea
                            placeholder="Describe what was completed, any important details, or special notes..."
                            value={notes}
                            onChange={(e) => setNotes(e.target.value)}
                            rows={4}
                            className="border-app-grey focus:ring-app-orange focus:border-app-orange"
                        />
                    </div>

                    {/* Proof Images */}
                    <div className="space-y-3">
                        <div className="flex items-center justify-between">
                            <label className="text-sm font-medium text-app-midnight">
                                Proof Images ({images.length}/5)
                            </label>
                            <span className="text-xs text-app-stone">Optional but recommended</span>
                        </div>

                        {/* Image Grid */}
                        <div className="grid grid-cols-3 gap-2">
                            {images.map((imageUrl, index) => (
                                <div key={index} className="relative group">
                                    <img
                                        src={imageUrl}
                                        alt={`Completion proof ${index + 1}`}
                                        className="w-full h-20 object-cover rounded-lg border border-app-grey"
                                    />
                                    <button
                                        type="button"
                                        onClick={() => removeImage(index)}
                                        className="absolute -top-1 -right-1 w-5 h-5 bg-app-midnight text-white rounded-full flex items-center justify-center opacity-0 group-hover:opacity-100 transition-opacity"
                                    >
                                        <X className="w-3 h-3" />
                                    </button>
                                </div>
                            ))}

                            {/* Upload Button */}
                            {images.length < 5 && (
                                <label className="flex flex-col items-center justify-center h-20 border-2 border-dashed border-app-grey rounded-lg cursor-pointer hover:border-app-orange transition-colors">
                                    <input
                                        ref={fileInputRef}
                                        type="file"
                                        multiple
                                        accept="image/*"
                                        className="hidden"
                                        onChange={(e) => handleImageUpload(e.target.files)}
                                    />
                                    <Camera className="w-5 h-5 text-app-stone mb-1" />
                                    <span className="text-xs text-app-stone">Add</span>
                                </label>
                            )}
                        </div>

                        {uploading && (
                            <div className="flex items-center gap-2 text-sm text-app-stone">
                                <Loader2 className="w-4 h-4 animate-spin" />
                                <span>Uploading images...</span>
                            </div>
                        )}
                    </div>

                    {/* Action Buttons */}
                    <div className="flex gap-3 pt-4">
                        <Button
                            type="button"
                            variant="outline"
                            onClick={onCancel}
                            className="flex-1"
                        >
                            Cancel
                        </Button>
                        <Button
                            type="submit"
                            disabled={submitting || uploading}
                            className="flex-1 mobile-button text-white"
                        >
                            {submitting ? (
                                <>
                                    <Loader2 className="w-4 h-4 animate-spin mr-2" />
                                    Submitting...
                                </>
                            ) : (
                                'Mark Complete'
                            )}
                        </Button>
                    </div>
                </form>
            </motion.div>
        </motion.div>
    );
}