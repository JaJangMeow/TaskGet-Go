
import React, { useState, useEffect } from "react";
import { Task } from "@/entities/Task";
import { User } from "@/entities/User";
import { Link } from "react-router-dom";
import { createPageUrl } from "@/utils";
import { Plus, Briefcase } from "lucide-react";
import { Button } from "@/components/ui/button";
import { Tabs, TabsList, TabsTrigger, TabsContent } from "@/components/ui/tabs";
import TaskCard from "../components/dashboard/TaskCard";

export default function MyTasks() {
    const [tasks, setTasks] = useState([]);
    const [user, setUser] = useState(null);
    const [loading, setLoading] = useState(true);

    useEffect(() => {
        loadMyTasks();
    }, []);

    const loadMyTasks = async () => {
        setLoading(true);
        try {
            const userData = await User.me();
            const tasksData = await Task.filter({ created_by: userData.email }, "-created_date");
            setUser(userData);
            setTasks(tasksData);
        } catch (error) {
            console.error("Error loading tasks:", error);
        }
        setLoading(false);
    };

    const filterTasksByStatus = (status) => {
        return tasks.filter(task => task.status === status);
    };

    const getStatusCount = (status) => {
        return filterTasksByStatus(status).length;
    };

    if (loading) {
        return (
            <div className="max-w-6xl mx-auto">
                <div className="animate-pulse space-y-6">
                    <div className="h-8 bg-slate-200 rounded w-1/3"></div>
                    <div className="grid md:grid-cols-2 lg:grid-cols-3 gap-6">
                        {[...Array(6)].map((_, i) => (
                            <div key={i} className="material-card p-6">
                                <div className="h-4 bg-slate-200 rounded w-3/4 mb-4"></div>
                                <div className="space-y-2 mb-4">
                                    <div className="h-3 bg-slate-200 rounded"></div>
                                    <div className="h-3 bg-slate-200 rounded w-2/3"></div>
                                </div>
                                <div className="h-8 bg-slate-200 rounded w-1/2"></div>
                            </div>
                        ))}
                    </div>
                </div>
            </div>
        );
    }

    return (
        <div className="max-w-6xl mx-auto space-y-8">
            {/* Header */}
            <div className="flex flex-col md:flex-row justify-between items-start md:items-center gap-4">
                <div>
                    <h1 className="text-3xl font-bold text-slate-900">My Tasks</h1>
                    <p className="text-slate-600 mt-2">
                        Manage the tasks you've posted ({tasks.length} total)
                    </p>
                </div>
                <Link to={createPageUrl("PostTask")}>
                    <Button className="material-button bg-blue-600 hover:bg-blue-700 text-white font-medium hover:shadow-lg hover:shadow-blue-500/25 transition-all duration-300">
                        <Plus className="w-4 h-4 mr-2" />
                        Post New Task
                    </Button>
                </Link>
            </div>

            {/* Stats Cards */}
            <div className="grid grid-cols-2 md:grid-cols-4 gap-4">
                {[
                    { status: "open", label: "Open", color: "bg-green-500", count: getStatusCount("open") },
                    { status: "in_progress", label: "In Progress", color: "bg-blue-500", count: getStatusCount("in_progress") },
                    { status: "completed", label: "Completed", color: "bg-purple-500", count: getStatusCount("completed") },
                    { status: "cancelled", label: "Cancelled", color: "bg-red-500", count: getStatusCount("cancelled") }
                ].map((stat) => (
                    <div key={stat.status} className="material-card p-4">
                        <div className="flex items-center gap-3">
                            <div className={`w-10 h-10 ${stat.color} rounded-lg flex items-center justify-center`}>
                                <Briefcase className="w-5 h-5 text-white" />
                            </div>
                            <div>
                                <p className="text-2xl font-bold text-slate-900">{stat.count}</p>
                                <p className="text-sm text-slate-600">{stat.label}</p>
                            </div>
                        </div>
                    </div>
                ))}
            </div>

            {tasks.length === 0 ? (
                <div className="material-card p-12 text-center">
                    <div className="w-16 h-16 bg-slate-100 rounded-full flex items-center justify-center mx-auto mb-6">
                        <Briefcase className="w-8 h-8 text-slate-400" />
                    </div>
                    <h3 className="text-xl font-semibold text-slate-900 mb-4">No tasks posted yet</h3>
                    <p className="text-slate-600 mb-6 max-w-md mx-auto">
                        Start by posting your first task. Describe what you need help with and connect with skilled helpers.
                    </p>
                    <Link to={createPageUrl("PostTask")}>
                        <Button className="material-button bg-blue-600 hover:bg-blue-700 text-white">
                            <Plus className="w-4 h-4 mr-2" />
                            Post Your First Task
                        </Button>
                    </Link>
                </div>
            ) : (
                <Tabs defaultValue="all" className="space-y-6">
                    <TabsList className="bg-white border border-slate-200">
                        <TabsTrigger value="all" className="data-[state=active]:bg-blue-600 data-[state=active]:text-white">
                            All ({tasks.length})
                        </TabsTrigger>
                        <TabsTrigger value="open" className="data-[state=active]:bg-green-600 data-[state=active]:text-white">
                            Open ({getStatusCount("open")})
                        </TabsTrigger>
                        <TabsTrigger value="in_progress" className="data-[state=active]:bg-blue-600 data-[state=active]:text-white">
                            In Progress ({getStatusCount("in_progress")})
                        </TabsTrigger>
                        <TabsTrigger value="completed" className="data-[state=active]:bg-purple-600 data-[state=active]:text-white">
                            Completed ({getStatusCount("completed")})
                        </TabsTrigger>
                    </TabsList>
                    <TabsContent value="all" className="space-y-6">
                        <div className="grid md:grid-cols-2 lg:grid-cols-3 gap-6">
                            {tasks.map((task) => (
                                <TaskCard key={task.id} task={task} currentUser={user} isManageView={true} />
                            ))}
                        </div>
                    </TabsContent>

                    {["open", "in_progress", "completed"].map((status) => (
                        <TabsContent key={status} value={status} className="space-y-6">
                            <div className="grid md:grid-cols-2 lg:grid-cols-3 gap-6">
                                {filterTasksByStatus(status).map((task) => (
                                    <TaskCard key={task.id} task={task} currentUser={user} isManageView={true} />
                                ))}
                            </div>
                        </TabsContent>
                    ))}
                </Tabs>
            )}
        </div>
    );
}
