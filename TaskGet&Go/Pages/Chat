import React, { useState, useEffect, useRef, useCallback } from 'react';
import { ChatMessage } from '@/entities/ChatMessage';
import { Task } from '@/entities/Task';
import { TaskApplication } from '@/entities/TaskApplication';
import { User } from '@/entities/User';
import { useNavigate } from 'react-router-dom';
import { createPageUrl } from '@/utils';
import { ArrowLeft, Send, Image, CheckCircle, Clock, AlertCircle } from 'lucide-react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Textarea } from '@/components/ui/textarea';
import { motion, AnimatePresence } from 'framer-motion';
import { format } from 'date-fns';
import TaskCompletionForm from '../components/chat/TaskCompletionForm';
import PaymentVerification from '../components/chat/PaymentVerification';
import { UploadFile } from '@/integrations/Core';

export default function Chat() {
    const navigate = useNavigate();
    const [messages, setMessages] = useState([]);
    const [newMessage, setNewMessage] = useState('');
    const [user, setUser] = useState(null);
    const [task, setTask] = useState(null);
    const [taskId, setTaskId] = useState(null);
    const [recipientEmail, setRecipientEmail] = useState(null);
    const [recipientName, setRecipientName] = useState('');
    const [application, setApplication] = useState(null);
    const [loading, setLoading] = useState(true);
    const [sending, setSending] = useState(false);
    const [showCompletionForm, setShowCompletionForm] = useState(false);
    const [showPaymentForm, setShowPaymentForm] = useState(false);
    const chatBottomRef = useRef(null);
    const fileInputRef = useRef(null);

    const loadChatData = useCallback(async (currentTaskId, currentUser) => {
        if (!currentTaskId || !currentUser) return;
        
        try {
            // Load task details
            const taskData = await Task.filter({ id: currentTaskId });
            if (taskData.length === 0) {
                navigate(createPageUrl('Dashboard'));
                return;
            }
            setTask(taskData[0]);

            // Load messages
            const allMessages = await ChatMessage.filter({ task_id: currentTaskId }, 'created_date');
            setMessages(allMessages);

            // Load application if user is the tasker
            if (recipientEmail) {
                const applications = await TaskApplication.filter({
                    task_id: currentTaskId,
                    applicant_email: currentUser.email === recipientEmail ? currentUser.email : recipientEmail
                });
                if (applications.length > 0) {
                    setApplication(applications[0]);
                }
            }
        } catch (error) {
            console.error('Error loading chat data:', error);
        }
    }, [navigate, recipientEmail]);

    useEffect(() => {
        const urlParams = new URLSearchParams(window.location.search);
        const currentTaskId = urlParams.get('task_id');
        const currentRecipientEmail = urlParams.get('recipient_email');
        const currentRecipientName = urlParams.get('recipient_name') || '';
        
        if (!currentTaskId || !currentRecipientEmail) {
            navigate(createPageUrl('Dashboard'));
            return;
        }

        setTaskId(currentTaskId);
        setRecipientEmail(currentRecipientEmail);
        setRecipientName(decodeURIComponent(currentRecipientName));

        User.me()
            .then(currentUser => {
                setUser(currentUser);
                loadChatData(currentTaskId, currentUser);
                setLoading(false);
            })
            .catch(() => {
                navigate(createPageUrl('Dashboard'));
            });
            
    }, [navigate, loadChatData]);

    // Auto-refresh messages every 3 seconds
    useEffect(() => {
        const interval = setInterval(() => {
            if (taskId && user) {
                loadChatData(taskId, user);
            }
        }, 3000);

        return () => clearInterval(interval);
    }, [taskId, user, loadChatData]);

    // Auto-scroll to bottom when new messages arrive
    useEffect(() => {
        chatBottomRef.current?.scrollIntoView({ behavior: 'smooth' });
    }, [messages]);

    const handleSendMessage = async (e) => {
        e.preventDefault();
        if (!newMessage.trim() || !user || sending) return;

        setSending(true);
        const messageData = {
            task_id: taskId,
            sender_email: user.email,
            receiver_email: recipientEmail,
            message: newMessage,
            message_type: 'text'
        };

        try {
            await ChatMessage.create(messageData);
            setNewMessage('');
            loadChatData(taskId, user);
        } catch (error) {
            console.error('Error sending message:', error);
            alert('Failed to send message. Please try again.');
        } finally {
            setSending(false);
        }
    };

    const handleImageUpload = async (file) => {
        if (!file || !user) return;

        // Check file size (10MB limit)
        if (file.size > 10 * 1024 * 1024) {
            alert('Image is too large. Maximum size is 10MB.');
            return;
        }

        if (!file.type.startsWith('image/')) {
            alert('Please select a valid image file.');
            return;
        }

        setSending(true);
        try {
            const result = await UploadFile({ file });
            
            const messageData = {
                task_id: taskId,
                sender_email: user.email,
                receiver_email: recipientEmail,
                message: `ðŸ“¸ Shared an image`,
                message_type: 'image',
                attachments: [result.file_url]
            };

            await ChatMessage.create(messageData);
            loadChatData(taskId, user);
        } catch (error) {
            console.error('Error uploading image:', error);
            alert('Failed to upload image. Please try again.');
        } finally {
            setSending(false);
        }
    };

    const handleTaskCompletion = async (completionData) => {
        try {
            await Task.update(taskId, {
                status: 'awaiting_verification',
                completion_images: completionData.images,
                completion_notes: completionData.notes,
                completed_at: new Date().toISOString()
            });

            // Send system message
            await ChatMessage.create({
                task_id: taskId,
                sender_email: user.email,
                receiver_email: recipientEmail,
                message: 'âœ… Task has been marked as completed and is awaiting verification',
                message_type: 'completion_request'
            });

            setShowCompletionForm(false);
            loadChatData(taskId, user);
        } catch (error) {
            console.error('Error marking task as completed:', error);
            alert('Failed to mark task as completed. Please try again.');
        }
    };

    const handleVerifyCompletion = async () => {
        try {
            await Task.update(taskId, {
                status: 'payment_pending',
                verified_at: new Date().toISOString()
            });

            await ChatMessage.create({
                task_id: taskId,
                sender_email: user.email,
                receiver_email: recipientEmail,
                message: 'âœ… Task completion verified! Payment is now pending.',
                message_type: 'verification'
            });

            setShowPaymentForm(true);
            loadChatData(taskId, user);
        } catch (error) {
            console.error('Error verifying task completion:', error);
            alert('Failed to verify task completion. Please try again.');
        }
    };

    const handlePaymentComplete = async (paymentData) => {
        try {
            await Task.update(taskId, {
                status: 'completed',
                payment_status: 'completed',
                payment_method: paymentData.method,
                payment_reference: paymentData.reference
            });

            await ChatMessage.create({
                task_id: taskId,
                sender_email: user.email,
                receiver_email: recipientEmail,
                message: `ðŸ’° Payment completed via ${paymentData.method.toUpperCase()}! Transaction ID: ${paymentData.reference}`,
                message_type: 'system'
            });

            setShowPaymentForm(false);
            loadChatData(taskId, user);
        } catch (error) {
            console.error('Error completing payment:', error);
            alert('Failed to process payment. Please try again.');
        }
    };

    if (loading) {
        return (
            <div className="flex items-center justify-center h-screen">
                <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-app-orange"></div>
            </div>
        );
    }

    const isTaskPoster = user && task && task.created_by === user.email;
    const isTasker = !isTaskPoster;
    const canCompleteTask = isTasker && task && task.status === 'in_progress';
    const canVerifyCompletion = isTaskPoster && task && task.status === 'awaiting_verification';
    const needsPayment = isTaskPoster && task && task.status === 'payment_pending';

    return (
        <div className="flex flex-col h-screen bg-app-silver">
            {/* Header */}
            <div className="flex items-center gap-4 p-4 bg-white/90 backdrop-blur-md border-b border-app-grey sticky top-0 z-50">
                <Button variant="outline" size="icon" onClick={() => window.history.back()}>
                    <ArrowLeft className="w-4 h-4" />
                </Button>
                <div className="flex-1">
                    <h1 className="text-lg font-bold text-app-midnight">{recipientName || 'Chat'}</h1>
                    <p className="text-sm text-app-stone">
                        {task ? task.title.substring(0, 30) + (task.title.length > 30 ? '...' : '') : 'Task Chat'}
                    </p>
                </div>
                {task && (
                    <div className={`px-3 py-1 rounded-full text-xs font-medium ${
                        task.status === 'open' ? 'bg-green-100 text-green-800' :
                        task.status === 'in_progress' ? 'bg-blue-100 text-blue-800' :
                        task.status === 'awaiting_verification' ? 'bg-yellow-100 text-yellow-800' :
                        task.status === 'payment_pending' ? 'bg-orange-100 text-orange-800' :
                        task.status === 'completed' ? 'bg-purple-100 text-purple-800' :
                        'bg-app-grey text-app-stone'
                    }`}>
                        {task.status.replace('_', ' ')}
                    </div>
                )}
            </div>

            {/* Task Actions Bar */}
            {(canCompleteTask || canVerifyCompletion || needsPayment) && (
                <div className="p-4 bg-white border-b border-app-grey">
                    {canCompleteTask && (
                        <Button
                            onClick={() => setShowCompletionForm(true)}
                            className="w-full mobile-button text-white"
                        >
                            <CheckCircle className="w-4 h-4 mr-2" />
                            Mark Task as Completed
                        </Button>
                    )}
                    
                    {canVerifyCompletion && (
                        <div className="space-y-3">
                            <div className="bg-yellow-50 border border-yellow-200 rounded-lg p-3">
                                <div className="flex items-center gap-2">
                                    <Clock className="w-4 h-4 text-yellow-600" />
                                    <span className="text-sm font-medium text-yellow-800">
                                        Task completion awaiting your verification
                                    </span>
                                </div>
                            </div>
                            <Button
                                onClick={handleVerifyCompletion}
                                className="w-full mobile-button text-white"
                            >
                                <CheckCircle className="w-4 h-4 mr-2" />
                                Verify & Process Payment
                            </Button>
                        </div>
                    )}
                    
                    {needsPayment && (
                        <div className="bg-orange-50 border border-orange-200 rounded-lg p-3">
                            <div className="flex items-center gap-2">
                                <AlertCircle className="w-4 h-4 text-orange-600" />
                                <span className="text-sm font-medium text-orange-800">
                                    Payment pending - Complete to finish the task
                                </span>
                            </div>
                        </div>
                    )}
                </div>
            )}

            {/* Messages */}
            <div className="flex-1 overflow-y-auto p-4 space-y-4">
                <AnimatePresence>
                    {messages.map((msg, index) => (
                        <motion.div
                            key={msg.id || index}
                            layout
                            initial={{ opacity: 0, y: 20 }}
                            animate={{ opacity: 1, y: 0 }}
                            transition={{ duration: 0.3 }}
                            className={`flex ${msg.sender_email === user?.email ? 'justify-end' : 'justify-start'}`}
                        >
                            <div className={`max-w-xs md:max-w-md ${
                                msg.message_type === 'system' || msg.message_type === 'completion_request' || msg.message_type === 'verification'
                                    ? 'mx-auto'
                                    : msg.sender_email === user?.email
                                    ? 'ml-auto'
                                    : 'mr-auto'
                            }`}>
                                {/* System Messages */}
                                {(msg.message_type === 'system' || msg.message_type === 'completion_request' || msg.message_type === 'verification') && (
                                    <div className="bg-app-grey/30 text-app-stone text-center py-2 px-4 rounded-full text-sm">
                                        {msg.message}
                                    </div>
                                )}
                                
                                {/* Regular Messages */}
                                {msg.message_type === 'text' && (
                                    <div className={`px-4 py-2 rounded-2xl ${
                                        msg.sender_email === user?.email
                                        ? 'bg-app-orange text-white rounded-br-none'
                                        : 'bg-white text-app-midnight rounded-bl-none border border-app-grey'
                                    }`}>
                                        <p className="text-sm">{msg.message}</p>
                                        <p className="text-xs opacity-70 mt-1">
                                            {format(new Date(msg.created_date), 'HH:mm')}
                                        </p>
                                    </div>
                                )}
                                
                                {/* Image Messages */}
                                {msg.message_type === 'image' && msg.attachments && msg.attachments.length > 0 && (
                                    <div className={`rounded-2xl overflow-hidden ${
                                        msg.sender_email === user?.email
                                        ? 'bg-app-orange rounded-br-none'
                                        : 'bg-white rounded-bl-none border border-app-grey'
                                    }`}>
                                        <img 
                                            src={msg.attachments[0]} 
                                            alt="Shared image"
                                            className="max-w-full h-auto"
                                        />
                                        <div className={`px-4 py-2 ${
                                            msg.sender_email === user?.email ? 'text-white' : 'text-app-midnight'
                                        }`}>
                                            <p className="text-sm">{msg.message}</p>
                                            <p className="text-xs opacity-70 mt-1">
                                                {format(new Date(msg.created_date), 'HH:mm')}
                                            </p>
                                        </div>
                                    </div>
                                )}
                            </div>
                        </motion.div>
                    ))}
                </AnimatePresence>
                <div ref={chatBottomRef} />
            </div>

            {/* Input */}
            <div className="p-4 bg-white/90 backdrop-blur-md border-t border-app-grey">
                <form onSubmit={handleSendMessage} className="flex gap-2 items-end">
                    <input
                        ref={fileInputRef}
                        type="file"
                        accept="image/*"
                        className="hidden"
                        onChange={(e) => e.target.files[0] && handleImageUpload(e.target.files[0])}
                    />
                    <Button
                        type="button"
                        variant="outline"
                        size="icon"
                        onClick={() => fileInputRef.current?.click()}
                        className="flex-shrink-0"
                        disabled={sending}
                    >
                        <Image className="w-4 h-4" />
                    </Button>
                    <Input
                        value={newMessage}
                        onChange={(e) => setNewMessage(e.target.value)}
                        placeholder="Type your message..."
                        className="flex-1 rounded-full bg-app-silver border-app-grey focus:ring-app-orange focus:border-app-orange"
                        disabled={sending}
                    />
                    <Button 
                        type="submit" 
                        size="icon" 
                        className="rounded-full mobile-button flex-shrink-0"
                        disabled={sending || !newMessage.trim()}
                    >
                        {sending ? (
                            <div className="animate-spin rounded-full h-4 w-4 border-b-2 border-white"></div>
                        ) : (
                            <Send className="w-4 h-4" />
                        )}
                    </Button>
                </form>
            </div>

            {/* Task Completion Form */}
            {showCompletionForm && (
                <TaskCompletionForm
                    task={task}
                    onSubmit={handleTaskCompletion}
                    onCancel={() => setShowCompletionForm(false)}
                />
            )}

            {/* Payment Form */}
            {showPaymentForm && (
                <PaymentVerification
                    task={task}
                    onPaymentComplete={handlePaymentComplete}
                    onCancel={() => setShowPaymentForm(false)}
                />
            )}
        </div>
    );
}